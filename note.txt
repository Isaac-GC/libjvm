char
-----------------------
Char in Java: 16-bit unsigned integers
char in Rust: four bytes in size


problem
----------------------
1. System.arraycopy
  The performance of JVM depends on arraycopy.

     ArrayList<Integer> list = new ArrayList<Integer>();
     int start = 0;
     while (start < 50000) {
         list.add(start++);
     }

  It's slow to run the code, but Oracle Java very quick.
  The reason is that, invoke 'clone' for every OopRef
  test case: $JDK_TEST/Character/CheckProp.java

  Key Points:
     a. create lots of Integer object
     b. ArrayList inner buf, new bigger buffer when reach limit,
       then, invoke System.arraycopy to move objects

2. dynamic workers in thread pool
  spawn & gc worker dynamic
indicators:
  a. system payload
  b. worker queue
  c. thread types (io? calculation?)


jdk
-----------------------
ByteBuffer (along with all IntBuffer, LongBuffer, ...) are generated from X-Buffer.java.template.


GC
-----------------------
paper:
http://users.cecs.anu.edu.au/~steveb/downloads/pdf/rust-ismm-2016.pdf
an example of a high performance GC impl in Rust.

codes:
https://github.com/Manishearth/rust-gc
Simple tracing (mark and sweep) garbage collector for Rust



Milestones
-----------------------
2020.01.30
Add.java run successfully

2020.02.01
github 100 commits

2020.02.09
code lines reach 10k

2020.02.13
HelloWorld run successfully

2020.02.14
Oop::str replaced by java.lang.String

2020.02.15
github 200 commits, First Watchers, CertainLach, thanks!

2020.02.19
Thank Rust CC(https://rust.cc/)，get lots of stars

2020.03.01
extract Ref from Oop, access prime value, no need lock anymore
extract DataArea from Frame, printStackTrace has Line Number
Included in 科技爱好者周刊 96th，thank yifeng
http://www.ruanyifeng.com/blog/2020/02/weekly-issue-96.html

2020.03.03
merge first patch from CertainLach, thanks!

2020.03.04
CertainLach translate README & comments to english

2020.03.05
Switch to Oracle JDK
github 300 commits

2020.03.12
support annotation

2020.03.17
extract class-parser crate

2020.03.22
github 400 commits

2020.04.18
github 500 commits
'javap' nearly complete
study how to impl java threads
signature parser
  rewrite based nom
  support generic

2020.05.10
threads supported
study gc

2020.06.06
simple gc based Rust Arc
avoid lock when access Oop::Ref

2020.06.20
study linux 'perf' && optimize, and performance is
getting better and better
